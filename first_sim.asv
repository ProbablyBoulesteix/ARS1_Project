close all;
clear;

%% define basic params of config
% definining hard coded arrays of start and end positions here, might fix later
start_positions = [2,3; -1,-3;  -5,0; -8,-3;  -11,-3];
stop_positions = [50, 0; 46, 0; 42, 0; 38, 8; 34, 0];
distance_formation_desired = [-4,0];

%define properties of swarm
numAagents = 5;
agentIDs = 1:1:5
swarmLeaderID = 1 % ID of leading bot


%% define swarm parameters 
% define connection graph between agents in inbound terms (ie if agent 1
% recieves data from agents 2, 4 and 5 write [2,4,5]
connectionTo1 = [2,3,4,5];
connectionTo2 = [1,3,4,5];
connectionTo3 = [1,2,4,5];
connectionTo4 = [1,2,3,5];
connectionTo5 = [1,2,3,4];
connectionLinks = {connectionTo1, connectionTo2, connectionTo3, connectionTo4, connectionTo5}; %build list of all relations here

%set gains here (tune later)
alphas = [1, 1, 1, 1, 1];
coopGains = ones(numAagents, numAagents)*0.0; %use unity gain to start


% define connection matrix
G = zeros(numAagents, numAagents);
for i = agentIDs
    sources = connectionLinks{i};
    %now iter through each source and set the connection coef to 1. sanity
    %check for matches beween i and j too
    for j = sources
        if i == j
            G(i,j) = 0;
        else
            G(i, j) = 1; % Set connection from agent i to agent j
        end
    end
end

%% let's start by plotting swarm on X-Y grid using boilerplate code (ignore for now)
% Plot the initial positions of the agents

x = -20:60;
y = -10; 10;
[X,Y] = meshgrid(x,y);

% Define waypoints for two markers
waypoints1 = [0 0; 1 1; 2 2; 3 3];
waypoints2 = [0 0; -1 -1; -2 -2; -3 -3];

% Combine into cell array
waypoints = {waypoints1, waypoints2};

% Run animation with 0.5s delay
animateMarkers(waypoints, 0.5);

%% simulation using just one robot
agent_coords = {}; %assume this is a T*N*2 cell where T is number of simulation timesteps and N is number of agents

% timestep counter
t = 1;

%loop here
while true
    if t <2 %add starting positions if at beginning of sim loop
        agent_coords{t} = start_positions;
        t = t + 1;

    else
    %increment here
        delta = controlLaw(agent_coords{t - 1}, stop_positions, 0.1, coopGains, G, distance_formation_desired);
        agent_coords{t} = agent_coords{t - 1} + delta;
        t = t + 1;
    end
    
    % Check stopping condition (example: stop after 100 steps)
    if t > 100  % Replace with your actual condition
        break;
    end
end

%%
agenttraj1 = extract_Ncoords(agent_coords, 1);
agenttraj2 = extract_Ncoords(agent_coords, 2);
agenttraj3 = extract_Ncoords(agent_coords, 3);
animateMarkers({agenttraj1, agenttraj2, agenttraj3}, 0.5);